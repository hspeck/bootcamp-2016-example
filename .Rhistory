mean(Y)
max(Y)
length(Y)
summary(Y)
#summary includes min, max, 1st/3rdQuartile, Median, Mean
#vectors can be a character or logical/boolean thing
Names<-c("Sarah", "Yunluan")
b<-c(TRUE, FALSE)
#use "class()" to determine type of class of data it belongs to, displayed on top right in R studion for values you've assigned
class(Y)
class(b)
#can test if each element of vector is greater than a particular value using ">"
#when testing object, will get back a logical vector with appropriate response for each value
Y>10
Y>mean(Y)
# test with, <, >, >=, <=, ==, != and other conditions
#== tests if vector equal to a number
Y==11
#!= tests of "not equal to"
Y!=11
#Algerbra with vectors
#when adding/multiplying vectors actually operaing on elements of the vectors
a<-1:3
b<-4:6
a+b
#mulitplication acts on each pair of vector
a*b
a/b
#scalars operate on vectors
a+1
#adds one to each element
a*2
#mutiplies each element by two
1/a
#R recycles the scalar as many times as needed in order to match the length of the vector
#Note: if try to multiply vectors of unequal length, R perform operation but may not give warning
#should warn if multiply 3 by 2 vectors ex below
a * 1:2
#gives the warningWarning message: "In a * 1:2 :   longer object length is not a multiple of shorter object length"
#R suppossedly recycles the shorter vector enough to match the length of longer vector, supposedly same as
a*c(1,2,1)
#if multiply vectors with length that is multiple of other, get no error, ex 4 and 2
1:4*1:2
#worked fine
#above same as below
1:4*c(1,2,1,2)
#B.3.3 Extraction and Missing Values
#two ways to extract
#1-id which row/column wanted
Y[1]
Y[1:3]
#2-provide logical vector (e.g. of TRUE's and FALSE's) of same length of vector you want to subset
Y>mean(Y)
#above line is just reminder, not necessary)
Y[Y>mean(Y)]
#extracts all values in Y for which the statement "value>mean(Y)" is TRUE
#missing data is of type "NA" aka "not available", R won't let you calc mean of a vector with missing data ordinarily,
#can deal with elements missing with special function is.na
a<-c(5,3,6,NA)
a
is.na(a)
#gives back logic vector to the question "is the value=NA?"
!is.na(a)
#gives back logic vector to the question "is the value not=NA?"
#can use these functions to call up only non-NA data like so
a[!is.na(a)]
#same with below
na.exclude(a)
#more example
mean(a)
mean(a, na.rm=TRUE)
d<-na.exclude(a)
mean(d)
#B.3.4 Matrices
#2-d set of elements, all elements of same type
#character matrix
matrix(letters[1:4], ncol = 2)
#letters 1:4 gives a b c d, ncol gives number of columns
#numeric matrix
M<-matrix(1:4, nrow =2)
M
#Note:matrix filled by columns in column major order, can also do my row
M2<-matrix(1:4, nrow =2, byrow=TRUE)
M2
#matrix with 1's on diagonal
I<-diag(1, nrow=2)
I
#Note, the column and rows are labeled with an integer and comma, likely specifies order aka 1, and ,1 intersect at 1,1
#Identity matrix important in matrix algerbra, equiv to scalar 1
#inverse of matrix M is matrix such that can mult with M and equal I (I has 1's along diagonal, 0's elsewhere)
Minv<-solve(M)
M %*% Minv
#QR decomposition available (e.g. qr.solve())
qr.solve(M)
help(qr.solve)
#extraction in matrices, same as in vectors, but specify both rows and columns
M[1,2]
M[1,1:2]
#if leave either row/column blank, R extract all row/columns
M[,2]
M[, ]
#skipping simple matrix algerbra
#B.3.5 Data frames
#data frames are 2-d, sim to spreadsheet/matrices.  All columns have same #rows
#unlike matrix, each column can be different data type
dat<-data.frame(species =c("S. altissima", "S. rugosa", "E. graminifolia", "A. pilosus"), treatment=factor(c("Control", "Water", "Control", "Water")),height=c(1.1, 0.8, 0.9, 1), width=c(1, 1.7, 0.6, 0.2))
dat
#so eac vector in the "data.frame()" is a column, with the vector name as the header
#extract data like in matrices
dat[2,]
#above brings out the the column header too
dat[3,4]
#can test elements in dataframes, below tests if each element in column 2 is "Water", can extract rows associated with this criterion
dat[,2]=="Water"
dat[dat[,2]=="Water",]
#can use subset function
subset(dat,treatment=="Water")
help(mean)
mean(1:4)
mean(1:4,trim=0)
class(1:10)
class(warpbreak)
class(warpbreaks)
summary(1:10)
summary(warpbreaks)
summary(lm(breaks ~ wool, data =warpbreaks))
MyBogusMean<-function(x, cheat=0.05) {
SumOfX<-sum(x)
n<-length(x)
trueMean<-SumOfX/n
(1+cheat)*trueMean
}
RealSales<-c(100,200,300)
MyBogusMean(RealSales)
MyBogusMean(RealSales, cheat = 0.1)
m<-matrix(1:10, nrow=2)
m
apply(m, MARGIN =1, mean)
apply(m, MARGIN = 2, sum)
sapply(1:10, function(i) mean(rnorm(5)))
gens<-10
#defining gens allows us to change this for function
output<-numeric(gens+1)
output[1]<-25
#assigning output to begin with and running through as t goes?
for (t in 1:gens) output[t+1]<-output[t] +round(rnorm(n=1, mean=0, ad=2), 0)
>output
gens<-10
#defining gens allows us to change this for function
output<-numeric(gens+1)
output[1]<-25
#assigning output to begin with and running through as t goes?
for (t in 1:gens) output[t+1]<-output[t] +round(rnorm(n=1, mean=0, ad=2), 0)
output
gens<-10
#defining gens allows us to change this for function
output<-numeric(gens+1)
output[1]<-25
#assigning output to begin with and running through as t goes?
for (t in 1:gens) output[t+1]<-output[t] +round(rnorm(n=1, mean=0, sd=2), 0)
output
data(trees)
attach(trees)
plot(Girth,Height)
help(attach)
par(mar=c(5,4,3,2))
plot(Girth, Volume, type = "n", main =  "My Trees")
points(Girth, Volume, type="h", col="lightgrey", pch=19)
par(mar=c(5,4,3,2))
plot(Girth, Volume, type = "n", main =  "My Trees")
points(Girth, Volume, type="h", col="lightgrey", pch=19)
#want to add points for these data using tree heights as ploting symbol, using alternate coloring system (hc1) (works better for humans), scale colors so hue varies between 30 and 300 depending onn height, allowing symbols to be transparent (ie. 90% opaque) overlapping, allow size of number to vary with height(cex=0.5 +hts) last, add legend
hts<-(Height-min(Height))/max(Height-min(Height))
my.colors<-hcl(h=30+270 *hts, alpha=0.9)
text(Girth, Volume, Height, col=my.colors, cex = 0.5+hts)
tree.sort<-trees[order(trees$Girth, trees$Height),]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col="darkred")
text(10, 58, "Height")
par(mar=c(5,4,3,2))
plot(Girth, Volume, type = "n", main =  "My Trees")
points(Girth, Volume, type="h", col="lightgrey", pch=19)
#want to add points for these data using tree heights as ploting symbol, using alternate coloring system (hc1) (works better for humans), scale colors so hue varies between 30 and 300 depending onn height, allowing symbols to be transparent (ie. 90% opaque) overlapping, allow size of number to vary with height(cex=0.5 +hts) last, add legend
hts<-(Height-min(Height))/max(Height-min(Height))
my.colors<-hcl(h=30+270 *hts, alpha=0.9)
text(Girth, Volume, Height, col=my.colors, cex = 0.5+hts)
#B.13.3 More than one response variable
#often plot more than one response variable per axis, could use lines/points to add each additional variable, could also use matplot to plot a matrix of variables vs. one predictor
tree.sort<-trees[order(trees$Girth, trees$Height),]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col="darkred")
text(10, 58, "Height")
tree.sort<-trees[order(trees$Girth, trees$Height), ]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col="darkred")
text(10, 58, "Height")
trees.sort<-trees[order(trees$Girth, trees$Height), ]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col="darkred")
text(10, 58, "Height")
quartz(, 4, 4)
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
quartz(, 4, 4)
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
#Now do the second plot, use same x values, new Y data, no labels specified, use a different line type for clarity
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
#add new Y values on 4th side(aka righthand Y axis), add a Y axis label for "marginal text"
axis(4)
Mtext("Height", side=4,line=3
par(mar=c(5,4,2,4))
plot(Girth,Volume, main="MyTrees")
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty="n", xlab="", ylab = "", pch=3)
axis(4)
mtext("Height",side=4,line=3)
par(mar=c(5,4,2,4))
plot(Girth,Volume, main="MyTrees")
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty="n", xlab="", ylab = "", pch=3)
axis(4)
mtext("Height",side=4,line=3)
windows(, 4, 4)
#this line gives an error, no quartz object. is this needed?, not in full script text below
#this is because its a MAC command, Windows is windows, changed
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
#Now do the second plot, use same x values, new Y data, no labels specified, use a different line type for clarity
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
#add new Y values on 4th side(aka righthand Y axis), add a Y axis label for "marginal text"
axis(4)
Mtext("Height", side=4,line=3)
windows(width = 5, height = 3)
windows(,5,5)
layout(matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
plot(Girth, Height)
windows(5,5)
layout(matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
plot(Girth, Height)
windows(4, 4)
#this line gives an error, no quartz object. is this needed?, not in full script text below
#this is because its a MAC command, Windows is windows, changed
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
#Now do the second plot, use same x values, new Y data, no labels specified, use a different line type for clarity
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
#add new Y values on 4th side(aka righthand Y axis), add a Y axis label for "marginal text"
axis(4)
Mtext("Height", side=4,line=3)
windows(4, 4)
#this line gives an error, no quartz object. is this needed?, not in full script text below
#this is because its a MAC command, Windows is windows, changed
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
#Now do the second plot, use same x values, new Y data, no labels specified, use a different line type for clarity
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
#add new Y values on 4th side(aka righthand Y axis), add a Y axis label for "marginal text"
axis(4)
mtext("Height", side=4,line=3)
windows(5,5)
layout(matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
plot(Girth, Height)
#second and third
par(mar=c(3,3,1,1), mgp=c(1.6,0.2,0), tcl=0.2)
plot(Girth, Height)
par(mar=c(3,3,2,1),mgp=c(1.6,0.2,0), tcl=0.2)
plot(Girth, Height, axes=FALSE,xlim=c(8,22))
axis(1,tcl=-0.3)
axis(2,tick=F)
rug(Height,side=2,col=2)
title("A Third, Very Wide, Plot")
getwd()
windows(4,4)
plot(Height, Volume, main="Tree Data")
dev.print(pdf,"MyTree.pdf")
#B4,B6, B13
#B4 Functions
#functions are commands that do things, they have names, arguements and values, ex below
help(mean)
#on help page, shows the arguements, first object=x, (object to calc mean for), second arg is trim=0 (fraction of observations to trim from each end of x) note that as it is already 0 this is default, meaning below are equivalent
mean(1:4)
mean(1:4,trim=0)
#R is "object oriented language" so same function name do different things on different classes of object
class(1:10)
class(warpbreaks)
summary(1:10)
summary(warpbreaks)
#for warpbreaks data frame, summary give six number summary for each numeric integer column but gives "tables" of the factors-i.e. count occurrences of each level of a factor and sorts levels. Summary or linear model gets output of regression
summary(lm(breaks ~ wool, data =warpbreaks))
#B.4.1 writing own functions
#making own function to calculate mean but tilt it as described
MyBogusMean<-function(x, cheat=0.05) {
SumOfX<-sum(x)
n<-length(x)
trueMean<-SumOfX/n
(1+cheat)*trueMean
}
RealSales<-c(100,200,300)
MyBogusMean(RealSales)
#function can take any input and do things, x and cheat are the arguements for the function
#we supplied arguement for cheat, this means that cheat has a default value, and don't need to supply it, if arguement not have default will have to supply it. Even if have one can change it ex below
MyBogusMean(RealSales, cheat = 0.1)
#B.6 Iterated Actions: the apply Family and Loops
#want to perform action many times, some cases is independent, for this we have many options
#if want action depend on previous action, then guide suggests for-loops
#B.6.1 Iterations of independent actions
#ex: have matrix want to do same thing to each row/column, use "apply", to apply function to each column/row
#tell "apply" what data to use, tell it the "margin" to focus on, tell it the function, "margin" is side of the matrix, matrices described by #rows then columns, so rows are first margin, columns are second margin
m<-matrix(1:10, nrow=2)
m
apply(m, MARGIN =1, mean)
apply(m, MARGIN = 2, sum)
#see ?rowMeans for simple/faster operations
#lapply will "apply" a function to each list element or column of dataframe, and return a list. "saplly" is sim, but simplifies result to less complex data structure
sapply(1:10, function(i) mean(rnorm(5)))
#i in function for independent?
#6.2 Dependent iterations
#use "for loops" for repeated actions dependent on previous outcomes
#for R for loops, computation is fastest if make holder for the output
#simulating random walk, start with 25 individuals, increase/decrease by some amount drawn randomly form normal distribution (mean 0, standard deviation 2) round "amount" to nearest integer (i.e. 0th decimal place)
#output differs due to random process
gens<-10
#defining gens allows us to change this for function
output<-numeric(gens+1)
output[1]<-25
#assigning output to begin with and running through as t goes?
for (t in 1:gens) output[t+1]<-output[t] +round(rnorm(n=1, mean=0, sd=2), 0)
output
#B.13 Graphics
#B.13.1 "plot"
data(trees)
attach(trees)
plot(Girth,Height)
help(attach)
#attach attaches a database to the search path, in this case trees
#B.13.2 Adding points, lines and text to a plot
#can add more info to plot
#below set up new graph without plotting points, add text at each point, then more points, a line, some text
par(mar=c(5,4,3,2))
plot(Girth, Volume, type = "n", main =  "My Trees")
points(Girth, Volume, type="h", col="lightgrey", pch=19)
#want to add points for these data using tree heights as ploting symbol, using alternate coloring system (hc1) (works better for humans), scale colors so hue varies between 30 and 300 depending onn height, allowing symbols to be transparent (ie. 90% opaque) overlapping, allow size of number to vary with height(cex=0.5 +hts) last, add legend
hts<-(Height-min(Height))/max(Height-min(Height))
my.colors<-hcl(h=30+270 *hts, alpha=0.9)
text(Girth, Volume, Height, col=my.colors, cex = 0.5+hts)
#B.13.3 More than one response variable
#often plot more than one response variable per axis, could use lines/points to add each additional variable, could also use matplot to plot a matrix of variables vs. one predictor
trees.sort<-trees[order(trees$Girth, trees$Height), ]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col="darkred" )
text(10, 58, "Height")
#commonly used arguements to plot table listed at 376
#often want to add second y-axis to graph with diff scale, trick is to plot a graph then tell R to do next step as if on a new device (see 'par' help page) while it really isn't, just overlaying one ontop of the other
#Note-also specify extra margin space on right side for second Y axis
windows(4, 4)
#this line gives an error, no quartz object. is this needed?, not in full script text below
#this is because its a MAC command, Windows is windows, changed
par(mar=c(5,4,2,4))
plot(Girth, Volume, main="My Trees")
#Now do the second plot, use same x values, new Y data, no labels specified, use a different line type for clarity
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty= "n", xlab="",ylab = "", pch=3)
#add new Y values on 4th side(aka righthand Y axis), add a Y axis label for "marginal text"
axis(4)
mtext("Height", side=4,line=3)
#full script below
par(mar=c(5,4,2,4))
plot(Girth,Volume, main="MyTrees")
par(new=TRUE)
plot(Girth, Height, axes=FALSE, bty="n", xlab="", ylab = "", pch=3)
axis(4)
mtext("Height",side=4,line=3)
#B.13.4 Controlling Graphics Devices
#when make grpah with plot function, typically open graphics window (in studio is lower right),if want more control have several functions for that
#can create new graphics "devices" i.e. seperate windows with command "windows" for Microsoft, or wuartz for Mac, or x11 for X11 Window system
#specify dimensions with width and height inside, see below
windows(width = 5, height = 3)
#to control parameters of graph (ie appearance), use arguements to the par function
#many arguemtns refer to sides of graph, numbered 1-4 for bottom x,leftY, topX, rightY
#arguements to "par" are a lot, see ?par) including mar(width of side margins, units in # of lines of text, default c(5,4,4,2)+0.1 so bottom is most room, right has least)
#"mgp" control spacing of axis title, labels,and line itself, default c(3,1,0) so axis title is 3 lines awy and axis line at edge of plotting region
#"tcl"=tick length, as fraction of height of line of text; negative values put ticks outside, positive is inside, default -0.5
#can build each side of graph separetly by initiating graph but not plotting axes plots (..., axes=FALSE) and then adding axes seperately e.g. "axis(1)" adds bottom
#can use layout to make graph with several smaller subgraphs (see also mfrow and mfcol args to par and function split.screen).  function layout takes matrix as arguement, matrix contains sequence fo number telling R how to fill regions.  Graphs can fit in more than one of these regions if indicated by same numebr
#creating compound graph on 4x4 grid, two rows filled in by rwos, 1st in upper left, second upper right, thrid fill thrid and fouth spots in second
windows(5,5)
layout(matrix(c(1,2,3,3), nrow=2, byrow=TRUE))
plot(Girth, Height)
#second and third
par(mar=c(3,3,1,1), mgp=c(1.6,0.2,0), tcl=0.2)
plot(Girth, Height)
par(mar=c(3,3,2,1),mgp=c(1.6,0.2,0), tcl=0.2)
plot(Girth, Height, axes=FALSE,xlim=c(8,22))
axis(1,tcl=-0.3)
axis(2,tick=F)
rug(Height,side=2,col=2)
title("A Third, Very Wide, Plot")
#B.13.5 Creating a Grappic File
#one way to get graphic is to create graphics device and then save with dev.print in format you want ex PDF
getwd()
windows(4,4)
plot(Height, Volume, main="Tree Data")
dev.print(pdf,"MyTree.pdf")
#that put it into my documents folder, suppose I could change working directory before doing it to make it go in specific folder, or specify it end up elsewhere
getwd
getwd()
setwd(GitHub/bootcamp-2016-examples)
setwd(C:/Users/Hayden/Documents/GitHub/bootcamp-2016-examples)
setwd(C:Users/Hayden/Documents/GitHub/bootcamp-2016-examples)
pwd
getwd()
setwd("\HAYDEN-THINK\Users\Hayden\Documents\GitHub\bootcamp-2016-example")
setwd("/HAYDEN-THINK/Users/Hayden/Documents/GitHub/bootcamp-2016-example")
setwd("C:/HAYDEN-THINK/Users/Hayden/Documents/GitHub/bootcamp-2016-example")
setwd("C:/Users/Hayden/Documents/GitHub/bootcamp-2016-example")
?lm
?quartz
help(quartz)
?windows
xx<-2
yy->22
22->22
22->y
?lm
xx<-2
grad.school.tips <- c( "use a reference manager", "learn a programming language", "write lots of papers")
?str
cat(grad.school.tips)
ls()
rm(yy)
22->yy
rm(y)
rm(yy)
rm(ls())
rm(list=ls())
ls()
library(ape)
library("ape", lib.loc="~/R/win-library/3.3")
list.files()
tt<-read.tree("tree.tre")
str(tt)
?str
attributes(tt)
tt$tip.label[1:10]
pruned.tree<-drop.tip(tt, tt$tip.label[1:7900])
plot(ladderize(pruned.tree))
for(ii in 1:5){
cat("\nthe number is ", ii)
}
notfish<-c("bat", "dolphin", "toad", "sold")
}
notfish<-c("bat", "dolphin", "toad", "sold")
for(animal in notfish){
cat(animal, "fish/n", sep="")
}
print(xx)
xx<-1
print(xx)
print(xx)
print(xx)
xx<-"a"
xx==a
xx=="a"
xx=="ab"
"a"==xx
}
for(ii in 1:6){
if (ii %% 2) {
cat(ii, " is odd\n")
}
else{
cat(ii, " is even\n")
}
for(ii in 1:6){
if (ii %% 2) {
cat(ii, " is odd\n")
}
else{
cat(ii, " is even\n")
}
}
for(ii in 1:6){
if (ii %% 2) {
cat(ii, " is odd\n")
}
else{
cat(ii, " is even\n")
}
}
print(ii)
for(ii in 1:6){
if (ii %% 2) {
cat(ii, " is odd\n")
}
else{
cat(ii, " is even\n")
}
}
print(ii)
?rnorm
help(rnorm)
help(rnorm)
2+2
2+2
setwd("C:/Users/Hayden/Documents/GitHub/bootcamp-2016-example")
